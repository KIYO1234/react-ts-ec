import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../../app/store';
// import { fetchCount } from './counterAPI';
import axios from 'axios'

// テスト用dummy--------------------
const sleep = (msec:number) => {
    const start = Number(new Date());
    while (Number(new Date()) - start < msec);
}

export const fetchDummy = createAsyncThunk(
    'fetch/dummy',
    async (num:number):Promise<number> => {
        await sleep(2000);
        return num
    }
)
export const fetchJSON = createAsyncThunk(
    'fetch/api',
    async() => {
        const res = await axios.get('https://jsonplaceholder.typicode.com/users/1');
        const { username } = res.data;
        return username
    }
)
// -------------------------

export interface CounterState {
  // 追加
  mode: number;
  username: string;
  // 既存
  value: number;
  status?: 'idle' | 'loading' | 'failed';
}

const initialState: CounterState = {
  mode: 0,
  username: '',
  value: 0,
  status: 'idle',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.

// -------------------------------------------------------
// // 今回は使わないのでコメントアウト
// export const incrementAsync = createAsyncThunk(
//   'counter/fetchCount',
//   async (amount: number) => {
//     const response = await fetchCount(amount);
//     // The value we return becomes the `fulfilled` action payload
//     return response.data;
//   }
// );
// -------------------------------------------------------


export const customCounterSlice = createSlice({
  name: 'counter',
  initialState,
  reducers: {
    // mode の値に応じた条件分岐を追加
    increment: (state) => {
      switch(state.mode){
          case 0:
              state.value += 1;
              break
          case 1:
              state.value += 100;
              break
          case 2:
              state.value += 10000;
              break
          default:
              break
      }
    },
    decrement: (state) => {
      state.value -= 1;
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    incrementByAmount: (state, action: PayloadAction<number>) => {
      switch(state.mode){
          case 0:
            //   console.log('kitayo')
              state.value += action.payload;
              break;
          case 1:
              state.value += 100 * action.payload;
              break;
          case 2:
              state.value += 10000 * action.payload;
              break;
          default:
              break;
      }
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.

// async関数は今回は使わないのでコメントアウト
  extraReducers: (builder) => {
    builder
    //   .addCase(incrementAsync.pending, (state) => {
    //     state.status = 'loading';
    //   })
    //   .addCase(incrementAsync.fulfilled, (state, action) => {
    //     state.status = 'idle';
    //     state.value += action.payload;
    //   });
        .addCase(fetchDummy.fulfilled, (state, action:PayloadAction<number>) => {
            state.value = 100 + action.payload
        })
        .addCase(fetchDummy.rejected, (state, action:PayloadAction<any>) => {
            state.value = 100 - action.payload
        })
        .addCase(fetchJSON.fulfilled, (state, action:PayloadAction<string>) => {
            state.username = action.payload
        })
        .addCase(fetchJSON.rejected, (state, action) => {
            state.username = 'anonymous';
        })
  },

});

export const { increment, decrement, incrementByAmount } = customCounterSlice.actions;


// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
export const incrementIfOdd = (amount: number): AppThunk => (
    dispatch,
    getState
    ) => {
        const currentValue = selectCount(getState());
        if (currentValue % 2 === 1) {
            dispatch(incrementByAmount(amount));
        }
    };
    
// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectCount = (state: RootState) => state.customCounter.value;

// username を useSelector で呼び出せるようにする
export const selectUsername = (state: RootState) => state.customCounter.username;

export default customCounterSlice.reducer;
